name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check TypeScript compilation
        run: npm run build
        
      - name: Check code formatting
        run: npm run format:check || true # Don't fail CI on formatting issues

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "MONGODB_URI=mongodb://localhost:27017/forage-test" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          
      - name: Run unit tests
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/forage-test
          
      - name: Run test coverage
        run: npm run test:cov
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/forage-test
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
  # End-to-End Tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Setup e2e test environment
        run: |
          cp .env.example .env.test
          echo "MONGODB_URI=mongodb://localhost:27017/forage-e2e-test" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-for-e2e" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "PORT=3001" >> .env.test
          
      - name: Run e2e tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/forage-e2e-test
          PORT: 3001

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: Run dependency vulnerability scan
        run: npx audit-ci --moderate
        continue-on-error: true

  # Build and Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, e2e, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Deploy to Render (Staging)
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  # Build and Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, e2e, security]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Run final tests
        run: npm test
        
      - name: Deploy to Render (Production)
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Successfully deployed to production!"
          echo "URL: ${{ steps.deploy.outputs.url }}"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          exit 1

  # Health Check Post-Deployment
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
      - name: Wait for deployment
        run: sleep 30
        
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed (HTTP $response)"
          else
            echo "‚ùå Health check failed (HTTP $response)"
            exit 1
          fi
          
      - name: API endpoints check
        run: |
          # Check critical endpoints
          endpoints=("/api" "/health")
          for endpoint in "${endpoints[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.PRODUCTION_URL }}$endpoint || echo "000")
            if [ "$response" = "200" ] || [ "$response" = "404" ]; then
              echo "‚úÖ Endpoint $endpoint is responsive (HTTP $response)"
            else
              echo "‚ùå Endpoint $endpoint failed (HTTP $response)"
              exit 1
            fi
          done
