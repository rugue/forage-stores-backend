version: '3.8'

services:
  # Production MongoDB
  mongodb:
    image: mongo:6.0
    container_name: forage-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: forage-stores
    volumes:
      - mongodb_prod_data:/data/db
      - ./scripts/mongo-init-prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - forage-prod-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Production Redis
  redis:
    image: redis:7-alpine
    container_name: forage-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_prod_data:/data
    networks:
      - forage-prod-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Production Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: forage-backend-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/forage-stores?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      PORT: 3000
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      PAYSTACK_SECRET_KEY: ${PAYSTACK_SECRET_KEY}
      PAYSTACK_PUBLIC_KEY: ${PAYSTACK_PUBLIC_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      MAIL_FROM: ${MAIL_FROM}
    volumes:
      - uploads_prod_data:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - forage-prod-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "node", "dist/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: forage-worker-prod
    restart: always
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/forage-stores?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - mongodb
      - redis
    networks:
      - forage-prod-network
    command: ["node", "dist/worker.js"]
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    profiles:
      - worker

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: forage-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads_prod_data:/usr/share/nginx/html/uploads:ro
    depends_on:
      - app
    networks:
      - forage-prod-network
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

volumes:
  mongodb_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  uploads_prod_data:
    driver: local

networks:
  forage-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
